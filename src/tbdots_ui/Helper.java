package tbdots_ui;

import java.io.InputStream;

public class Helper {
  
    protected static class UserAuth{
        protected static boolean isValidUser;
    }
    
    public static class Frame{
        public static void setDefault(javax.swing.JFrame frame){
            frame.setLocationRelativeTo(null);
            frame.setResizable(false);
        }
        public static void setIcon(javax.swing.JFrame frame, String path){
            //java.net.URL url = frame.getClass().getResource("/com/mexam/shoppinglist/icons8_Buy_96px.png");
            java.net.URL url = frame.getClass().getResource(path);
            java.awt.Image image = new javax.swing.ImageIcon(url).getImage();
            frame.setIconImage(image);
        }        
    }
    
    public static class Table{
        public static void setModel(javax.swing.JTable table, String[][] records, String[] columns){
            javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(records, columns){
                @Override
                public boolean isCellEditable(int row, int column) {return false;}
            };
            table.setModel(model);
        }
        
        public static int getSelectedRow(javax.swing.JTable table){
            try{
                return java.lang.Integer.parseInt(table.getValueAt(table.getSelectedRow(), 0).toString());
            }
            catch(Exception e){
                return 0;
            }
        }
        
        public static Object getSelectedRow(javax.swing.JTable table, int column){
            try{
                return table.getValueAt(table.getSelectedRow(), column);
            }
            catch(Exception e){
                return 0;
            }
        }
        
        //http://www.java2s.com/Tutorials/Java/Swing/JTable/Get_selected_value_from_JTable_in_Java.htm
        public static String getSelectedCellValue(javax.swing.JTable table, int row, int col){
            String selectedData = null;

            int[] selectedRow = table.getSelectedRows();
            int[] selectedColumns = table.getSelectedColumns();

            for (int i = 0; i < selectedRow.length; i++) {
              for (int j = 0; j < selectedColumns.length; j++) {
                selectedData = (String) table.getValueAt(selectedRow[i], col);
              }
            }
                return selectedData;
        }

        public static void searchKey (javax.swing.JTable table, String key){
            
        }
    }
    
    public static class DateChooser{
        //https://stackoverflow.com/questions/30235183/how-do-we-disable-editing-options-on-jdatechooser
        public static void setReadOnly(com.toedter.calendar.JDateChooser chooser){
            com.toedter.calendar.JTextFieldDateEditor editor = (com.toedter.calendar.JTextFieldDateEditor) chooser.getDateEditor();
            editor.setEditable(false);
        }

        //https://stackoverflow.com/questions/21012751/get-jdatechooser-date-to-jlabel
        public static String getDate(com.toedter.calendar.JDateChooser chooser){
            java.util.Date date = chooser.getDate();
            return java.text.DateFormat.getDateInstance().format(date);
        }    
    }
    
    public static class Date{
        public static String getAutoGeneratedID(){
            String id="000000000000";
            try {
                java.util.Date dateToday = new java.util.Date();    
                java.text.DateFormat df = new java.text.SimpleDateFormat("MMddYYHHmmss");
                id = df.format(dateToday);            
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
            return id;
        }
        
        public static String getAutoGeneratedID(String format){
            String id="000000000000";
            try {
                java.util.Date dateToday = new java.util.Date();    
                java.text.DateFormat df = new java.text.SimpleDateFormat(format);
                id = df.format(dateToday);            
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
            return id;
        }        
        
        public static String getCurrentTimeStamp(){
            String timestamp="000000000000";
            try {
                java.util.Date dateToday = new java.util.Date();    
                java.text.DateFormat df = new java.text.SimpleDateFormat("MMMM dd yyy, hh:mm:ss aa");
                timestamp = df.format(dateToday);            
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
            return timestamp;
        }
        
        public static String getCurrentTimeStamp(String format){
            String timestamp="000000000000";
            try {
                java.util.Date dateToday = new java.util.Date();    
                java.text.DateFormat df = new java.text.SimpleDateFormat(format);
                timestamp = df.format(dateToday);            
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
            return timestamp;
        }        
        
        public static void showClock(javax.swing.JLabel lblTimestamp){
            Thread clock = new Thread(){
                public void run(){
                    try{
                        while(true){
                            String timestamp = Helper.Date.getCurrentTimeStamp();
                            lblTimestamp.setText("Today is " + timestamp);  
                            sleep(1000);
                        }
                    }
                    catch(Exception e){
                        System.out.println("Clock Error: " + e.getMessage());
                    }
                }
            };
            clock.start();
        }
    }

    public static class Report{
        public static void viewReport(String reportName){
            try{
                net.sf.jasperreports.engine.design.JasperDesign jasperDesign = net.sf.jasperreports.engine.xml.JRXmlLoader.load(reportName);
                net.sf.jasperreports.engine.JasperReport jasperReport = net.sf.jasperreports.engine.JasperCompileManager.compileReport(jasperDesign);
                net.sf.jasperreports.engine.JasperPrint jasperPrint = net.sf.jasperreports.engine.JasperFillManager.fillReport(jasperReport, null, SQLite.conn);
                net.sf.jasperreports.view.JasperViewer.viewReport(jasperPrint, false);             
            }catch(Exception e){
                System.out.println("iReport Error: " + e.getMessage());
            }    
        }
        public static void viewReport(javax.swing.JScrollPane jspReport, String reportName){            
            try{
                java.util.HashMap parameter = new java.util.HashMap();
                java.io.File reportFile = new java.io.File(reportName);          

                net.sf.jasperreports.engine.design.JasperDesign jasperDesign = net.sf.jasperreports.engine.xml.JRXmlLoader.load(reportFile);
                net.sf.jasperreports.engine.JasperReport jReport = net.sf.jasperreports.engine.JasperCompileManager.compileReport(jasperDesign);
                net.sf.jasperreports.engine.JasperPrint jPrint = net.sf.jasperreports.engine.JasperFillManager.fillReport(jReport, parameter, SQLite.conn);
                net.sf.jasperreports.view.JRViewer viewer = new net.sf.jasperreports.view.JRViewer(jPrint);
                viewer.setOpaque(true);
                viewer.setVisible(true);
                jspReport.add(viewer);
                jspReport.setViewportView(viewer);            
            }catch(Exception e){
                System.out.println("iReport Error: " + e.getMessage());
            }
        }
    }
}